#include <Wire.h>
#include <avr/sleep.h>
#include <avr/power.h>

// Pin definitions
const int buttonPin = 2;
const int mosfetPin = 3;
const int greenLEDPin = 7;
const int redLEDPin = 8;
const int batteryPin = A0;

// Flag and state variables
volatile bool buttonPressed = false;
bool powerState = false;
unsigned long pressTime = 0;
unsigned long lastMeasureTime = 0;

// Timing constants
const unsigned long longPressDuration = 5000; // 5 seconds
const unsigned long measureInterval = 600000; // 10 minutes in milliseconds
const unsigned long powerOnLEDDuration = 3000; // 3 seconds
const unsigned long powerOffLEDDuration = 3000; // 3 seconds
const unsigned long mosfetOffDelay = 12000; // 12 seconds
const unsigned long debounceDelay = 50; // Debounce delay in milliseconds

const int I2C_ADDR = 8; // I2C address

void setup() {
  // Initialize pin modes
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(mosfetPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  
  // Set initial pin states to LOW
  digitalWrite(mosfetPin, LOW);
  digitalWrite(greenLEDPin, LOW);
  digitalWrite(redLEDPin, LOW);

  // Attach interrupt to button pin
  attachInterrupt(digitalPinToInterrupt(buttonPin), wakeUp, FALLING);

  // Initialize I2C communication
  Wire.begin(I2C_ADDR);
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
}

void loop() {
  // Handle button press if detected
  if (buttonPressed) {
    handleButtonPress();
  }

  // Measure battery voltage at regular intervals if power is on
  if (powerState && (millis() - lastMeasureTime > measureInterval)) {
    measureBatteryVoltage();
    lastMeasureTime = millis();
  }

  // Enter sleep mode to save power
  enterSleepMode();
}

void handleButtonPress() {
  buttonPressed = false; // Reset the button press flag
  detachInterrupt(digitalPinToInterrupt(buttonPin)); // Prevent multiple triggers
  delay(debounceDelay); // Debounce delay

  pressTime = millis();
  while (digitalRead(buttonPin) == LOW); // Wait for button release

  unsigned long pressDuration = millis() - pressTime;
  
  if (pressDuration > longPressDuration) {
    togglePowerState();
  } else {
    sendSleepSignal();
  }

  attachInterrupt(digitalPinToInterrupt(buttonPin), wakeUp, FALLING); // Re-attach interrupt
}

void togglePowerState() {
  powerState = !powerState; // Toggle power state

  if (powerState) {
    // Power on sequence
    digitalWrite(greenLEDPin, HIGH);
    digitalWrite(mosfetPin, HIGH);
    delay(powerOnLEDDuration);
    digitalWrite(greenLEDPin, LOW);
    lastMeasureTime = millis();
  } else {
    // Power off sequence
    digitalWrite(redLEDPin, HIGH);
    sendShutdownSignal();
    delay(powerOffLEDDuration);
    digitalWrite(redLEDPin, LOW);
    delay(mosfetOffDelay);
    digitalWrite(mosfetPin, LOW);
  }
}

void sendShutdownSignal() {
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('S'); // Send shutdown signal to Pi
  Wire.endTransmission();
}

void sendSleepSignal() {
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('L'); // Send sleep signal to Pi
  Wire.endTransmission();
}

void measureBatteryVoltage() {
  int sensorValue = analogRead(batteryPin);
  float batteryVoltage = sensorValue * (5.0 / 1023.0) * 2; // Assuming a voltage divider

  // Check if battery voltage is within expected range
  if (batteryVoltage >= 2.5 && batteryVoltage <= 4.2) {
    // Calculate battery percentage
    int batteryPercentage = map(batteryVoltage * 100, 250, 420, 0, 100);
    batteryPercentage = constrain(batteryPercentage, 0, 100);

    // Send battery percentage over I2C
    Wire.beginTransmission(I2C_ADDR);
    Wire.write('B');
    Wire.write(batteryPercentage);
    Wire.endTransmission();
  }
}

void enterSleepMode() {
  // Disable ADC to save power during sleep
  ADCSRA &= ~(1 << ADEN);
  
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  sleep_cpu(); // Put the MCU to sleep
  
  // MCU wakes up here
  sleep_disable();
  
  // Re-enable ADC after waking up
  ADCSRA |= (1 << ADEN);
}

void wakeUp() {
  buttonPressed = true; // Set flag to indicate button press
}

void requestEvent() {
  // Placeholder for handling I2C requests
}

void receiveEvent(int howMany) {
  // Placeholder for handling I2C data reception
}
