#include <Wire.h>
#include <avr/sleep.h>
#include <avr/power.h>

const int buttonPin = 2;
const int mosfetPin = 3;
const int greenLEDPin = 7;
const int redLEDPin = 8;
const int batteryPin = A0;
volatile bool buttonPressed = false;
bool powerState = false;
unsigned long pressTime = 0;
const unsigned long longPressDuration = 5000; // 5 seconds
const unsigned long measureInterval = 600000; // 10 minutes in milliseconds
unsigned long lastMeasureTime = 0;
const int I2C_ADDR = 8;

void setup() {
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(mosfetPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  
  digitalWrite(mosfetPin, LOW);
  digitalWrite(greenLEDPin, LOW);
  digitalWrite(redLEDPin, LOW);

  attachInterrupt(digitalPinToInterrupt(buttonPin), wakeUp, FALLING);
  Wire.begin(I2C_ADDR);
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);
}

void loop() {
  if (buttonPressed) {
    buttonPressed = false;
    pressTime = millis();
    while (digitalRead(buttonPin) == LOW); // Wait for button release

    unsigned long pressDuration = millis() - pressTime;
    
    if (pressDuration > longPressDuration) {
      powerState = !powerState;

      if (powerState) {
        digitalWrite(greenLEDPin, HIGH);
        digitalWrite(mosfetPin, HIGH);
        delay(3000);
        digitalWrite(greenLEDPin, LOW);
        delay(100);
        lastMeasureTime = millis();
      } else {
        digitalWrite(redLEDPin, HIGH);
        Wire.beginTransmission(I2C_ADDR);
        Wire.write('S'); // Send shutdown signal to Pi
        Wire.endTransmission();
        delay(3000);
        digitalWrite(redLEDPin, LOW);
        delay(12000);
        digitalWrite(mosfetPin, LOW);
      }
    } else {
      Wire.beginTransmission(I2C_ADDR);
      Wire.write('L'); // Send sleep signal to Pi
      Wire.endTransmission();
    }
  }

  if (powerState && (millis() - lastMeasureTime > measureInterval)) {
    measureBatteryVoltage();
    lastMeasureTime = millis();
  }

  enterSleepMode();
}

void measureBatteryVoltage() {
  int sensorValue = analogRead(batteryPin);
  float batteryVoltage = sensorValue * (5.0 / 1023.0) * 2;

  int batteryPercentage = map(batteryVoltage * 100, 250, 420, 0, 100);
  batteryPercentage = constrain(batteryPercentage, 0, 100);

  Wire.beginTransmission(I2C_ADDR);
  Wire.write('B');
  Wire.write(batteryPercentage);
  Wire.endTransmission();
}

void enterSleepMode() {
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  sleep_cpu();
  sleep_disable();
}

void wakeUp() {
  buttonPressed = true;
}

void requestEvent() {
  // Implement if needed
}

void receiveEvent(int howMany) {
  // Implement if needed
}
