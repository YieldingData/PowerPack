#include <Wire.h>
#include <avr/sleep.h>
#include <avr/power.h>

// Pin definitions for ATmega328P
const int buttonPin = 2; // PD2, connected to the charge detection circuit
const int mosfetPin = 3; // PD3
const int greenLEDPin = 4; // PD4
const int redLEDPin = 5; // PD5
const int batteryPin = A1; // PC1
const int tempPin = A0; // PC0

// Battery serial number based on compile date and time
#define STRINGIFY(x) #x
#define TOSTRING(x) STRINGIFY(x)
const char serialNumber[] = "BAT" __DATE__ __TIME__;

// Flag and state variables
volatile bool buttonPressed = false;
bool powerState = false;
unsigned long pressTime = 0;
unsigned long lastMeasureTime = 0;
bool chargingState = false; // New variable to track charging state

// Timing constants
const unsigned long longPressDuration = 5000; // 5 seconds
const unsigned long chargingDuration = 10000; // 10 seconds
const unsigned long measureInterval = 600000; // 10 minutes in milliseconds
const unsigned long powerOnLEDDuration = 3000; // 3 seconds
const unsigned long powerOffLEDDuration = 3000; // 3 seconds
const unsigned long mosfetOffDelay = 12000; // 12 seconds
const unsigned long debounceDelay = 50; // Debounce delay in milliseconds
const unsigned long chargingMeasureInterval = 30000; // 30 seconds
const unsigned long fadeDuration = 1000; // 1 second fade duration

const int I2C_ADDR = 8; // I2C address

void setup() {
  // Initialize pin modes
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(mosfetPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(tempPin, INPUT);
  
  // Set initial pin states to LOW
  digitalWrite(mosfetPin, LOW);
  digitalWrite(greenLEDPin, LOW);
  digitalWrite(redLEDPin, LOW);

  // Attach interrupt to button pin (PD2, INT0)
  attachInterrupt(digitalPinToInterrupt(buttonPin), wakeUp, FALLING);

  // Initialize I2C communication
  Wire.begin(I2C_ADDR);
  Wire.onRequest(requestEvent);

  // Initialize serial communication for debugging
  Serial.begin(9600);

  // Configure Timer2 for fast PWM on PD4 (greenLEDPin)
  TCCR2A = _BV(WGM20) | _BV(WGM21) | _BV(COM2B1); // Fast PWM mode, clear OC2B on compare match, set OC2B at bottom
  TCCR2B = _BV(CS20); // No prescaling
}

void loop() {
  // Handle button press if detected
  if (buttonPressed) {
    handleButtonPress();
  }

  // Check charging state and measure battery voltage and temperature every 30 seconds if charging
  if (chargingState && (millis() - lastMeasureTime >= chargingMeasureInterval)) {
    measureBatteryVoltage();
    measureBatteryTemperature();
    lastMeasureTime = millis();
    indicateCharging();
  } else if (powerState && (millis() - lastMeasureTime > measureInterval)) {
    // Measure battery voltage and temperature at regular intervals if power is on
    measureBatteryVoltage();
    measureBatteryTemperature();
    lastMeasureTime = millis();
  }

  // Enter sleep mode to save power
  enterSleepMode();
}

void handleButtonPress() {
  buttonPressed = false; // Reset the button press flag
  detachInterrupt(digitalPinToInterrupt(buttonPin)); // Prevent multiple triggers
  delay(debounceDelay); // Debounce delay

  pressTime = millis();
  while (digitalRead(buttonPin) == LOW); // Wait for button release

  unsigned long pressDuration = millis() - pressTime;

  if (pressDuration > longPressDuration && pressDuration <= chargingDuration) {
    togglePowerState();
  } else if (pressDuration > chargingDuration) {
    chargingState = true;
    measureBatteryVoltage();
    measureBatteryTemperature();
    lastMeasureTime = millis();
  } else {
    sendSleepSignal();
  }

  attachInterrupt(digitalPinToInterrupt(buttonPin), wakeUp, FALLING); // Re-attach interrupt
}

void togglePowerState() {
  powerState = !powerState; // Toggle power state
  chargingState = false; // Reset charging state when toggling power

  if (powerState) {
    // Power on sequence
    digitalWrite(greenLEDPin, HIGH);
    digitalWrite(mosfetPin, HIGH);
    delay(powerOnLEDDuration);
    digitalWrite(greenLEDPin, LOW);
    lastMeasureTime = millis();
  } else {
    // Power off sequence
    digitalWrite(redLEDPin, HIGH);
    sendShutdownSignal();
    delay(powerOffLEDDuration);
    digitalWrite(redLEDPin, LOW);
    delay(mosfetOffDelay);
    digitalWrite(mosfetPin, LOW);
  }
}

void sendShutdownSignal() {
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('S'); // Send shutdown signal
  Wire.write(0);   // Placeholder value
  Wire.endTransmission();
}

void sendSleepSignal() {
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('L'); // Send sleep signal
  Wire.write(0);   // Placeholder value
  Wire.endTransmission();
}

void measureBatteryVoltage() {
  int sensorValue = analogRead(batteryPin);
  float batteryVoltage = sensorValue * (5.0 / 1023.0) * 2; // Assuming a voltage divider

  // Check if battery voltage is within expected range
  if (batteryVoltage >= 2.5 && batteryVoltage <= 4.2) {
    // Calculate battery percentage
    int batteryPercentage = map(batteryVoltage * 100, 250, 420, 0, 100);
    batteryPercentage = constrain(batteryPercentage, 0, 100);

    // Send battery percentage over I2C
    Wire.beginTransmission(I2C_ADDR);
    Wire.write('B');
    Wire.write(batteryPercentage);
    Wire.endTransmission();
    
    // Send battery voltage data over serial
    Serial.print("Battery Voltage: ");
    Serial.print(batteryVoltage);
    Serial.println(" V");
  }
}

void measureBatteryTemperature() {
  int tempValue = analogRead(tempPin);
  float temperatureC = (tempValue * (5.0 / 1023.0) - 0.5) * 100; // Assuming TMP36 sensor

  // Send temperature data over I2C
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('T');
  Wire.write((int)temperatureC);
  Wire.endTransmission();

  // Send temperature data over serial
  Serial.print("Battery Temperature: ");
  Serial.print(temperatureC);
  Serial.println(" Â°C");
}

void indicateCharging() {
  // Fade in and out the green LED to indicate charging
  for (int brightness = 0; brightness <= 255; brightness++) {
    analogWrite(greenLEDPin, brightness);
    delay(fadeDuration / 255);
  }
  for (int brightness = 255; brightness >= 0; brightness--) {
    analogWrite(greenLEDPin, brightness);
    delay(fadeDuration / 255);
  }

  // Send charging state over I2C
  Wire.beginTransmission(I2C_ADDR);
  Wire.write('C'); // 'C' indicates charging
  Wire.write(0);   // Placeholder value
  Wire.endTransmission();
}

void enterSleepMode() {
  // Disable ADC to save power during sleep
  power_adc_disable();
  
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  sleep_cpu(); // Put the MCU to sleep
  
  // MCU wakes up here
  sleep_disable();
  
  // Re-enable ADC after waking up
  power_all_enable();
}

void wakeUp() {
  buttonPressed = true; // Set flag to indicate button press
}

void requestEvent() {
  Wire.write(serialNumber); // Send the serial number upon request
}

void receiveEvent(int howMany) {
  // Placeholder for handling I2C data reception
}
