#include <Wire.h>
#include <avr/sleep.h>
#include <avr/power.h>

// Pin definitions for ATtiny85
const int buttonPin = 4;    // PB4
const int mosfetPin = 3;    // PB3
const int greenLEDPin = 0;  // PB0
const int redLEDPin = 1;    // PB1
const int batteryPin = A1;  // PB2
const int temperatureSensorPin = 5;  // PB5 for temperature sensor (formerly charging status)

// Flag and state variables
volatile bool buttonPressed = false;
bool powerState = false;
bool isCharging = false;
unsigned long pressTime = 0;
unsigned long lastMeasureTime = 0;
unsigned long lastTempReadTime = 0;
float batteryTemperature = 0.0;

// Timing constants
const unsigned long longPressDuration = 5000;    // 5 seconds
const unsigned long measureIntervalNormal = 600000;    // 10 minutes in milliseconds
const unsigned long measureIntervalCharging = 30000;   // 30 seconds in charging state
const unsigned long temperatureReadIntervalNormal = 10000; // 10 seconds for temperature reading
const unsigned long temperatureReadIntervalCharging = 30000; // 30 seconds in charging state
const unsigned long i2cTransmissionIntervalNormal = 600000; // 10 minutes for normal operation
const unsigned long i2cTransmissionIntervalCharging = 30000; // 30 seconds in charging state
const unsigned long powerOnLEDDuration = 3000;   // 3 seconds
const unsigned long powerOffLEDDuration = 3000;  // 3 seconds
const unsigned long mosfetOffDelay = 12000;      // 12 seconds
const unsigned long debounceDelay = 50;          // Debounce delay in milliseconds

void setup() {
  // Initialize pin modes
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(mosfetPin, OUTPUT);
  pinMode(greenLEDPin, OUTPUT);
  pinMode(redLEDPin, OUTPUT);
  pinMode(batteryPin, INPUT); // Assuming A1 is set as INPUT (default for analogRead)
  pinMode(temperatureSensorPin, INPUT); // PB5 for temperature sensor

  // Set initial pin states to LOW
  digitalWrite(mosfetPin, LOW);
  digitalWrite(greenLEDPin, LOW);
  digitalWrite(redLEDPin, LOW);

  // Attach interrupt to button pin (PB4, INT0)
  attachInterrupt(0, wakeUp, FALLING);

  // Initialize I2C communication
  Wire.begin();
  Wire.onRequest(requestEvent);
  Wire.onReceive(receiveEvent);

  // Initialize Serial communication
  Serial.begin(9600);
}

void loop() {
  // Check charging pin state to determine charging status
  if (digitalRead(buttonPin) == HIGH) {
    // Device is in charging state
    isCharging = true;
    setChargingMode(); // Adjust timings and communication for charging state
  } else {
    // Device is not charging
    isCharging = false;
    setNormalMode(); // Set timings and communication for normal operation
  }

  // Handle button press and sleep as before
  if (buttonPressed) {
    handleButtonPress();
  }

  // Measure battery voltage at regular intervals if power is on
  if (powerState && (millis() - lastMeasureTime > measureInterval())) {
    measureBatteryVoltage();
    lastMeasureTime = millis();
  }

  // Measure ambient temperature at regular intervals
  if (millis() - lastTempReadTime > temperatureReadInterval()) {
    measureAmbientTemperature();
    lastTempReadTime = millis();
  }

  // Enter sleep mode to save power
  enterSleepMode();
}

void handleButtonPress() {
  buttonPressed = false; // Reset the button press flag
  detachInterrupt(0);    // Prevent multiple triggers
  delay(debounceDelay);  // Debounce delay

  pressTime = millis();
  while (digitalRead(buttonPin) == LOW); // Wait for button release

  unsigned long pressDuration = millis() - pressTime;

  if (pressDuration > longPressDuration) {
    togglePowerState();
  } else {
    sendSleepSignal();
  }

  attachInterrupt(0, wakeUp, FALLING); // Re-attach interrupt
}

void togglePowerState() {
  powerState = !powerState; // Toggle power state

  if (powerState) {
    // Power on sequence
    digitalWrite(greenLEDPin, HIGH);
    digitalWrite(mosfetPin, HIGH);
    delay(powerOnLEDDuration);
    digitalWrite(greenLEDPin, LOW);
    lastMeasureTime = millis();
  } else {
    // Power off sequence
    digitalWrite(redLEDPin, HIGH);
    sendShutdownSignal();
    delay(powerOffLEDDuration);
    digitalWrite(redLEDPin, LOW);
    delay(mosfetOffDelay);
    digitalWrite(mosfetPin, LOW);
  }
}

void setChargingMode() {
  // Adjust intervals and communication for charging state
  measureInterval = measureIntervalCharging;
  temperatureReadInterval = temperatureReadIntervalCharging;
  i2cTransmissionInterval = i2cTransmissionIntervalCharging;
}

void setNormalMode() {
  // Set back to normal operation intervals and communication
  measureInterval = measureIntervalNormal;
  temperatureReadInterval = temperatureReadIntervalNormal;
  i2cTransmissionInterval = i2cTransmissionIntervalNormal;
}

unsigned long measureInterval() {
  return isCharging ? measureIntervalCharging : measureIntervalNormal;
}

unsigned long temperatureReadInterval() {
  return isCharging ? temperatureReadIntervalCharging : temperatureReadIntervalNormal;
}

unsigned long i2cTransmissionInterval() {
  return isCharging ? i2cTransmissionIntervalCharging : i2cTransmissionIntervalNormal;
}

void sendShutdownSignal() {
  Wire.beginTransmission(8); // Replace with your I2C address
  Wire.write('S'); // Send shutdown signal
  Wire.endTransmission();
}

void sendSleepSignal() {
  Wire.beginTransmission(8); // Replace with your I2C address
  Wire.write('L'); // Send sleep signal
  Wire.endTransmission();
}

void measureBatteryVoltage() {
  int sensorValue = analogRead(batteryPin);
  float batteryVoltage = sensorValue * (5.0 / 1023.0) * 2; // Assuming a voltage divider

  // Send battery voltage data over serial
  Serial.print("Battery Voltage: ");
  Serial.print(batteryVoltage);
  Serial.println(" V");

  // Check if battery voltage is within expected range
  if (batteryVoltage >= 2.5 && batteryVoltage <= 4.2) {
    // Calculate battery percentage
    int batteryPercentage = map(batteryVoltage * 100, 250, 420, 0, 100);
    batteryPercentage = constrain(batteryPercentage, 0, 100);

    // Send battery percentage over I2C
    Wire.beginTransmission(8); // Replace with your I2C address
    Wire.write('B');
    Wire.write(batteryPercentage);
    Wire.endTransmission();
  }
}

void measureAmbientTemperature() {
  // Read temperature from sensor and update batteryTemperature
  int sensorValue = analogRead(temperatureSensorPin);
  float voltage = sensorValue * (5.0 / 1023.0);
  float temperature = (voltage - 0.5) * 100.0; // Example formula, adjust as per sensor characteristics

  // Update batteryTemperature
  batteryTemperature = temperature;

  // Send ambient temperature data over serial
  Serial.print("Ambient Temperature: ");
  Serial.print(batteryTemperature);
  Serial.println(" Â°C");
}

void enterSleepMode() {
  // Disable ADC to save power during sleep
  power_adc_disable();
  
  set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  sleep_enable();
  sleep_cpu(); // Put the MCU to sleep
  
  // MCU wakes up here
  sleep_disable();
  
  // Re-enable ADC after waking up
  power_all_enable();
}

void wakeUp() {
  buttonPressed = true; // Set flag to indicate button press
}

void requestEvent() {
  // Placeholder for handling I2C requests
}

void receiveEvent(int howMany) {
  // Placeholder for handling I2C data reception
}
